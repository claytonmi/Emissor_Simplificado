unit NMCadastroDeEmpresa;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uDataModulePrincipal, Vcl.StdCtrls, NMPesquisaDeEmpresas,
  Vcl.ExtCtrls, Vcl.ExtDlgs, FireDAC.Stan.Intf, Data.DB, FireDAC.Comp.Client, System.StrUtils;

type
  TFCadastroDeEmpresa = class(TForm)
    EdNomeEmpresa: TEdit;
    EdTelefone: TEdit;
    EdNomeFantasia: TEdit;
    EdCNPJ: TEdit;
    EdEndereco: TEdit;
    EdBairro: TEdit;
    EdCidade: TEdit;
    EdEstado: TEdit;
    CheckBoxDefault: TCheckBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Panelbutoes: TPanel;
    PanelEndereco: TPanel;
    PanelInformacoes: TPanel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    BtNovo: TButton;
    BtGravar: TButton;
    BtEditar: TButton;
    BtCancelar: TButton;
    OpenPictureDialog: TOpenPictureDialog;
    ImgEmpresa: TImage;
    BtImagem: TButton;
    Label9: TLabel;
    Label10: TLabel;
    BtExcluir: TButton;
    EdCodigoEmpresa: TEdit;
    procedure BtImagemClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BtNovoClick(Sender: TObject);
    procedure BtGravarClick(Sender: TObject);
    procedure BtExcluirClick(Sender: TObject);
    procedure BtEditarClick(Sender: TObject);
    procedure BtCancelarClick(Sender: TObject);
    procedure EdCNPJKeyPress(Sender: TObject; var Key: Char);
    procedure EdTelefoneKeyPress(Sender: TObject; var Key: Char);
  private
  FImagemStream: TMemoryStream;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FCadastroDeEmpresa: TFCadastroDeEmpresa;

implementation

{$R *.dfm}

procedure TFCadastroDeEmpresa.BtCancelarClick(Sender: TObject);
begin
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;
    ImgEmpresa.Picture := nil;

    //Contrele de campos habilitados
    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;

    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;

end;

procedure TFCadastroDeEmpresa.BtEditarClick(Sender: TObject);
begin
  NMPesquisaDeEmpresa := TNMPesquisaDeEmpresa.Create(Self);
  try
    NMPesquisaDeEmpresa.ShowModal; // Abre a pesquisa

    // Se um ID válido foi selecionado, busca os dados no banco
    if IDEmpresaSelecionada > 0 then
    begin
      DataModulePrincipal.FDQueryEmpresa.Close;
      DataModulePrincipal.FDQueryEmpresa.SQL.Text := 'SELECT * FROM Empresa WHERE IDEmpresa = :IDEmpresa';
      DataModulePrincipal.FDQueryEmpresa.ParamByName('IDEmpresa').AsInteger := IDEmpresaSelecionada;
      DataModulePrincipal.FDQueryEmpresa.Open;

      if not DataModulePrincipal.FDQueryEmpresa.IsEmpty then
      begin
        EdCodigoEmpresa.Text := IntToStr(DataModulePrincipal.FDQueryEmpresa.FieldByName('IDEmpresa').AsInteger);
        EdNomeEmpresa.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('NomeEmpresa').AsString;
        EdCNPJ.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('CNPJ').AsString;
        EdNomeFantasia.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('NomeFantasia').AsString;
        EdTelefone.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('Telefone').AsString;
        EdEndereco.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('Endereco').AsString;
        EdCidade.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('Cidade').AsString;
        EdBairro.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('Bairro').AsString;
        EdEstado.Text := DataModulePrincipal.FDQueryEmpresa.FieldByName('Estado').AsString;

        EdNomeEmpresa.Enabled := true;
        EdCNPJ.Enabled := true;
        EdNomeFantasia.Enabled := true;
        CheckBoxDefault.Enabled := true;
        EdTelefone.Enabled := true;
        EdEndereco.Enabled := true;
        EdCidade.Enabled := true;
        EdBairro.Enabled := true;
        EdEstado.Enabled := true;

        BtImagem.Enabled := true;
        BtNovo.Enabled := false;
        BtGravar.Enabled := true;
        BtEditar.Enabled := false;
        BtCancelar.Enabled := true;
        BtExcluir.Enabled := true;


        // Definir CheckBox com base no campo FlDefault
        CheckBoxDefault.Checked := DataModulePrincipal.FDQueryEmpresa.FieldByName('FlDefault').AsString = 'S';

        // Carregar imagem se existir
        if not DataModulePrincipal.FDQueryEmpresa.FieldByName('ImgLogo').IsNull then
        begin
          var StreamLogo := TMemoryStream.Create;
          try
            (DataModulePrincipal.FDQueryEmpresa.FieldByName('ImgLogo') as TBlobField).SaveToStream(StreamLogo);
            StreamLogo.Position := 0;
            ImgEmpresa.Picture.LoadFromStream(StreamLogo);
          finally
            StreamLogo.Free;
          end;
        end
        else
          ImgEmpresa.Picture := nil;
      end;
    end;
  finally
    NMPesquisaDeEmpresa.Free;
  end;
end;


procedure TFCadastroDeEmpresa.BtExcluirClick(Sender: TObject);
var
  IDEmpresaExcluir: Integer;
begin
  // Verifica se o campo 'EdCodigoEmpresa' (campo de ID) está preenchido com o ID da empresa
  IDEmpresaExcluir := StrToIntDef(EdCodigoEmpresa.Text, 0);

  if IDEmpresaExcluir = 0 then
  begin
    ShowMessage('Selecione uma empresa para excluir.');
    Exit;
  end;

  // Confirma a exclusão
  if MessageDlg('Tem certeza que deseja excluir esta empresa?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit;

  try
    // Preparar a query para excluir o registro da tabela Empresa
    DataModulePrincipal.FDQueryEmpresa.Close;
    DataModulePrincipal.FDQueryEmpresa.SQL.Text :=
      'DELETE FROM Empresa WHERE IDEmpresa = :IDEmpresa';

    // Passa o ID da empresa para o parâmetro
    DataModulePrincipal.FDQueryEmpresa.ParamByName('IDEmpresa').AsInteger := IDEmpresaExcluir;

    // Executa o comando SQL para excluir o registro
    DataModulePrincipal.FDQueryEmpresa.ExecSQL;
    DataModulePrincipal.FDConnection.Commit;

    // Exibe uma mensagem de sucesso
    ShowMessage('Empresa excluída com sucesso!');

    // Após excluir, limpa os campos do formulário
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;

    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;

    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;

    ImgEmpresa.Picture := nil;

    BtExcluir.Enabled := false;
    BtImagem.Enabled := false;
  except
    on E: Exception do
      ShowMessage('Erro ao excluir empresa: ' + E.Message);
  end;
end;


procedure TFCadastroDeEmpresa.BtGravarClick(Sender: TObject);
var
  StreamLogo: TMemoryStream;
begin
  // Validação dos campos obrigatórios
  if (Trim(EdNomeEmpresa.Text) = '') or
     (Trim(EdTelefone.Text) = '') or
     (Trim(EdNomeFantasia.Text) = '') or
     (Trim(EdCNPJ.Text) = '') then
  begin
    ShowMessage('Preencha todos os campos obrigatórios!');
    Exit;
  end;

  try
    StreamLogo := TMemoryStream.Create;
    try
      ImgEmpresa.Picture.Graphic.SaveToStream(StreamLogo);
      StreamLogo.Position := 0;

      // Utilizar BeginTransaction para iniciar a transação
      DataModulePrincipal.FDConnection.StartTransaction;

      // Se BtExcluir está ativo, faz UPDATE, senão faz INSERT
      if BtExcluir.Enabled then
      begin
        // Atualiza o registro existente
        with DataModulePrincipal.FDQueryEmpresa do
        begin
          Close;
          SQL.Text := 'UPDATE Empresa SET NomeEmpresa = :NomeEmpresa, Telefone = :Telefone, NomeFantasia = :NomeFantasia, ' +
                      'CNPJ = :CNPJ, Endereco = :Endereco, Bairro = :Bairro, Cidade = :Cidade, Estado = :Estado, ' +
                      'ImgLogo = :ImgLogo, FlDefault = :FlDefault WHERE IDEmpresa = :IDEmpresa';

          ParamByName('IDEmpresa').AsInteger := StrToInt(EdCodigoEmpresa.Text);
        end;
      end
      else
      begin
        // Insere um novo registro
        with DataModulePrincipal.FDQueryEmpresa do
        begin
          Close;
          SQL.Text := 'INSERT INTO Empresa (NomeEmpresa, Telefone, NomeFantasia, CNPJ, Endereco, Bairro, Cidade, Estado, ImgLogo, FlDefault) ' +
                      'VALUES (:NomeEmpresa, :Telefone, :NomeFantasia, :CNPJ, :Endereco, :Bairro, :Cidade, :Estado, :ImgLogo, :FlDefault)';
        end;
      end;

      // Atribui os valores dos campos
      with DataModulePrincipal.FDQueryEmpresa do
      begin
        ParamByName('NomeEmpresa').AsString := EdNomeEmpresa.Text;
        ParamByName('Telefone').AsString := EdTelefone.Text;
        ParamByName('NomeFantasia').AsString := EdNomeFantasia.Text;
        ParamByName('CNPJ').AsString := EdCNPJ.Text;
        ParamByName('Endereco').AsString := EdEndereco.Text;
        ParamByName('Bairro').AsString := EdBairro.Text;
        ParamByName('Cidade').AsString := EdCidade.Text;
        ParamByName('Estado').AsString := EdEstado.Text;
        ParamByName('ImgLogo').LoadFromStream(StreamLogo, ftBlob);

        // Atribui o valor do CheckBox para FlDefault
        if CheckBoxDefault.Checked then
          ParamByName('FlDefault').AsString := 'S'
        else
          ParamByName('FlDefault').AsString := 'N';

        // Executa a query
        ExecSQL;
      end;

      // Commit da transação
      DataModulePrincipal.FDConnection.Commit;

      ShowMessage('Empresa ' + IfThen(BtExcluir.Enabled, 'atualizada', 'cadastrada') + ' com sucesso!');
    except
      on E: Exception do
      begin
        // Em caso de erro, desfaz a transação
        DataModulePrincipal.FDConnection.Rollback;
        ShowMessage('Erro ao ' + IfThen(BtExcluir.Enabled, 'atualizar', 'cadastrar') + ' empresa: ' + E.Message);
      end;
    end;
  finally
    StreamLogo.Free;

    // Limpar campos e resetar estado dos botões
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;
    ImgEmpresa.Picture := nil;

    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;

    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;
  end;
end;



procedure TFCadastroDeEmpresa.BtImagemClick(Sender: TObject);
var
  OpenDialog: TOpenPictureDialog;
begin
  OpenDialog := TOpenPictureDialog.Create(nil);
  try
    OpenDialog.Filter := 'Imagens|*.jpg;*.png;*.bmp';
    if OpenDialog.Execute then
    begin
      ImgEmpresa.Picture.LoadFromFile(OpenDialog.FileName); // Exibe a imagem

      // Limpa o buffer anterior e salva a nova imagem
      FImagemStream.Clear;
      ImgEmpresa.Picture.Graphic.SaveToStream(FImagemStream);
      FImagemStream.Position := 0;
    end;
  finally
    OpenDialog.Free;
  end;
end;

procedure TFCadastroDeEmpresa.BtNovoClick(Sender: TObject);
begin
  // Verifica a quantidade de registros na tabela Empresa
  DataModulePrincipal.FDQueryEmpresa.Close;
  DataModulePrincipal.FDQueryEmpresa.SQL.Text := 'SELECT COUNT(*) FROM Empresa';
  DataModulePrincipal.FDQueryEmpresa.Open;

  // Se já existir 10 ou mais registros, bloqueia o cadastro
  if DataModulePrincipal.FDQueryEmpresa.Fields[0].AsInteger >= 10 then
  begin
    ShowMessage('Limite de 10 empresas atingido. Não é possível cadastrar mais empresas.');
    DataModulePrincipal.FDQueryEmpresa.Close;
    Exit;
  end
  else
  begin
    //Contrele de campos habilitados
    EdNomeEmpresa.Enabled := true;
    EdCNPJ.Enabled := true;
    EdNomeFantasia.Enabled := true;
    CheckBoxDefault.Enabled := true;
    EdTelefone.Enabled := true;
    EdEndereco.Enabled := true;
    EdCidade.Enabled := true;
    EdBairro.Enabled := true;
    EdEstado.Enabled := true;

    BtImagem.Enabled := true;
    BtNovo.Enabled := False;
    BtGravar.Enabled := true;
    BtEditar.Enabled := False;
    BtCancelar.Enabled := true;
  end;
end;

procedure TFCadastroDeEmpresa.EdCNPJKeyPress(Sender: TObject; var Key: Char);
var
  TextoAtual: string;
  ApenasNumeros: string;
  i: Integer;
begin
  // Permite apenas números e backspace
  if not (Key in ['0'..'9', #8]) then
  begin
    Key := #0;  // Bloqueia caracteres inválidos
    Exit;
  end;

  // Se for backspace, não faça nada, pois ele já pode apagar os caracteres
  if Key = #8 then
  begin
    Exit;
  end;

  // Obtém o texto atual sem pontos, barras ou traços
  TextoAtual := EdCNPJ.Text;
  ApenasNumeros := '';
  for i := 1 to Length(TextoAtual) do
    if TextoAtual[i] in ['0'..'9'] then
      ApenasNumeros := ApenasNumeros + TextoAtual[i];

  // Limita a 14 números
  if (Length(ApenasNumeros) >= 14) then
  begin
    Key := #0;  // Impede a digitação de mais números
    Exit;
  end;

  // Adiciona a formatação automaticamente enquanto digita
  case Length(ApenasNumeros) of
    2, 5: EdCNPJ.Text := EdCNPJ.Text + '.';
    8: EdCNPJ.Text := EdCNPJ.Text + '/';
    12: EdCNPJ.Text := EdCNPJ.Text + '-';
  end;

  // Move o cursor para o final do texto
  EdCNPJ.SelStart := Length(EdCNPJ.Text);
end;


procedure TFCadastroDeEmpresa.EdTelefoneKeyPress(Sender: TObject; var Key: Char);
var
  TextoAtual: string;
  ApenasNumeros: string;
  i: Integer;
begin
  // Permite apenas números e backspace
  if not (Key in ['0'..'9', #8]) then
  begin
    Key := #0;  // Bloqueia caracteres inválidos
    Exit;
  end;

  // Se for backspace, não faça nada, pois ele já pode apagar os caracteres
  if Key = #8 then
  begin
    Exit;
  end;

  // Obtém o texto atual sem a máscara
  TextoAtual := EdTelefone.Text;
  ApenasNumeros := '';
  for i := 1 to Length(TextoAtual) do
    if TextoAtual[i] in ['0'..'9'] then
      ApenasNumeros := ApenasNumeros + TextoAtual[i];

  // Limita a 11 números (telefone no formato (XX) XXXXX-XXXX)
  if (Length(ApenasNumeros) >= 14) then
  begin
    Key := #0;  // Impede a digitação de mais números
    Exit;
  end;

  // Formata o telefone automaticamente enquanto digita
  case Length(ApenasNumeros) of
    1: EdTelefone.Text := '(' + EdTelefone.Text;
    3: EdTelefone.Text := EdTelefone.Text + ') ';
    6: EdTelefone.Text := EdTelefone.Text + ' ';
    10: EdTelefone.Text := EdTelefone.Text + '-';
  end;

  // Move o cursor para o final do texto
  EdTelefone.SelStart := Length(EdTelefone.Text);
end;


procedure TFCadastroDeEmpresa.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FImagemStream.Free;
end;

procedure TFCadastroDeEmpresa.FormCreate(Sender: TObject);
begin
  FImagemStream := TMemoryStream.Create;


  //Contrele de campos habilitados
  EdNomeEmpresa.Enabled := false;
  EdCNPJ.Enabled := false;
  EdNomeFantasia.Enabled := false;
  CheckBoxDefault.Enabled := false;
  EdTelefone.Enabled := false;
  EdEndereco.Enabled := false;
  EdCidade.Enabled := false;
  EdBairro.Enabled := false;
  EdEstado.Enabled := false;

  BtImagem.Enabled := false;
  BtNovo.Enabled := True;
  BtGravar.Enabled := false;
  BtEditar.Enabled := true;
  BtCancelar.Enabled := false;
end;

end.
