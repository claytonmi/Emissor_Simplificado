unit NMCadastroDeEmpresa;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uDataModulePrincipal, Vcl.StdCtrls, NMPesquisaDeEmpresas,
  Vcl.ExtCtrls, Vcl.ExtDlgs, FireDAC.Stan.Intf, Data.DB, FireDAC.Comp.Client, System.StrUtils,
  Vcl.Buttons;

type
  TFCadastroDeEmpresa = class(TForm)
    EdNomeEmpresa: TEdit;
    EdTelefone: TEdit;
    EdNomeFantasia: TEdit;
    EdCNPJ: TEdit;
    EdEndereco: TEdit;
    EdBairro: TEdit;
    EdCidade: TEdit;
    EdEstado: TEdit;
    CheckBoxDefault: TCheckBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Panelbutoes: TPanel;
    PanelEndereco: TPanel;
    PanelInformacoes: TPanel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    BtNovo: TButton;
    BtGravar: TButton;
    BtEditar: TButton;
    BtCancelar: TButton;
    OpenPictureDialog: TOpenPictureDialog;
    ImgEmpresa: TImage;
    BtImagem: TButton;
    Label9: TLabel;
    Label10: TLabel;
    BtExcluir: TButton;
    EdCodigoEmpresa: TEdit;
    BtInfo: TBitBtn;
    BalloonHintCadastroEmpresa: TBalloonHint;
    procedure BtImagemClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BtNovoClick(Sender: TObject);
    procedure BtGravarClick(Sender: TObject);
    procedure BtExcluirClick(Sender: TObject);
    procedure BtEditarClick(Sender: TObject);
    procedure BtCancelarClick(Sender: TObject);
    procedure EdCNPJKeyPress(Sender: TObject; var Key: Char);
    procedure EdTelefoneKeyPress(Sender: TObject; var Key: Char);
    procedure BtInfoClick(Sender: TObject);
    procedure MostrarBalloonHint(Controle: TControl; Titulo, Mensagem: string);
    procedure EdNomeEmpresaExit(Sender: TObject);
    procedure EdNomeFantasiaExit(Sender: TObject);
    procedure EdCNPJExit(Sender: TObject);
    procedure EdEnderecoExit(Sender: TObject);
    procedure EdCidadeExit(Sender: TObject);
    procedure EdBairroExit(Sender: TObject);
    procedure EdEstadoExit(Sender: TObject);
  private
  FImagemStream: TMemoryStream;
  TutorialAtivo: Boolean;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FCadastroDeEmpresa: TFCadastroDeEmpresa;

implementation

{$R *.dfm}

procedure TFCadastroDeEmpresa.BtCancelarClick(Sender: TObject);
begin
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;
    ImgEmpresa.Picture := nil;
    EdCodigoEmpresa.Clear;

    //Contrele de campos habilitados
    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;

    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;

end;

procedure TFCadastroDeEmpresa.BtEditarClick(Sender: TObject);
begin
  NMPesquisaDeEmpresa := TNMPesquisaDeEmpresa.Create(Self);
  try
    NMPesquisaDeEmpresa.ShowModal; // Abre a pesquisa sem bloquear o restante do código

    // Exemplo de verificação após o fechamento da pesquisa
    if IDEmpresaSelecionada > 0 then
    begin
      // Usar somente um fechamento de query para evitar reabertura repetitiva
      with DataModulePrincipal.FDQueryEmpresa do
      begin
        Close;
        SQL.Text := 'SELECT * FROM Empresa WHERE IDEmpresa = :IDEmpresa';
        ParamByName('IDEmpresa').AsInteger := IDEmpresaSelecionada;
        Open;
        if not IsEmpty then
        begin
          EdCodigoEmpresa.Text := IntToStr(FieldByName('IDEmpresa').AsInteger);
          EdNomeEmpresa.Text := FieldByName('NomeEmpresa').AsString;
          EdCNPJ.Text := FieldByName('CNPJ').AsString;
          EdNomeFantasia.Text := FieldByName('NomeFantasia').AsString;
          EdTelefone.Text := FieldByName('Telefone').AsString;
          EdEndereco.Text := FieldByName('Endereco').AsString;
          EdCidade.Text := FieldByName('Cidade').AsString;
          EdBairro.Text := FieldByName('Bairro').AsString;
          EdEstado.Text := FieldByName('Estado').AsString;
          EdNomeEmpresa.Enabled := true;
          EdCNPJ.Enabled := true;
          EdNomeFantasia.Enabled := true;
          CheckBoxDefault.Enabled := true;
          EdTelefone.Enabled := true;
          EdEndereco.Enabled := true;
          EdCidade.Enabled := true;
          EdBairro.Enabled := true;
          EdEstado.Enabled := true;
          BtImagem.Enabled := true;
          BtNovo.Enabled := false;
          BtGravar.Enabled := true;
          BtEditar.Enabled := false;
          BtCancelar.Enabled := true;
          BtExcluir.Enabled := true;
          // Definir CheckBox com base no campo FlDefault
          CheckBoxDefault.Checked := FieldByName('FlDefault').AsString = 'S';
          // Carregar imagem se existir
          if not FieldByName('ImgLogo').IsNull then
          begin
            var StreamLogo := TMemoryStream.Create;
            try
              (FieldByName('ImgLogo') as TBlobField).SaveToStream(StreamLogo);
              StreamLogo.Position := 0;
              ImgEmpresa.Picture.LoadFromStream(StreamLogo);
            finally
              StreamLogo.Free;
            end;
          end
          else
            ImgEmpresa.Picture := nil;
        end;
      end;
    end;
  finally
    NMPesquisaDeEmpresa.Free;
  end;
end;



procedure TFCadastroDeEmpresa.BtExcluirClick(Sender: TObject);
var
  IDEmpresaExcluir: Integer;
begin
  // Verifica se o campo 'EdCodigoEmpresa' (campo de ID) está preenchido com o ID da empresa
  IDEmpresaExcluir := StrToIntDef(EdCodigoEmpresa.Text, 0);

  if IDEmpresaExcluir = 0 then
  begin
    ShowMessage('Selecione uma empresa para excluir.');
    Exit;
  end;

  // Confirma a exclusão
  if MessageDlg('Tem certeza que deseja excluir esta empresa?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit;

  DataModulePrincipal.FDConnection.StartTransaction;
  try
    // Preparar a query para excluir o registro da tabela Empresa
    DataModulePrincipal.FDQueryEmpresa.Close;
    DataModulePrincipal.FDQueryEmpresa.SQL.Text :=
      'DELETE FROM Empresa WHERE IDEmpresa = :IDEmpresa';

    // Passa o ID da empresa para o parâmetro
    DataModulePrincipal.FDQueryEmpresa.ParamByName('IDEmpresa').AsInteger := IDEmpresaExcluir;

    // Executa o comando SQL para excluir o registro
    DataModulePrincipal.FDQueryEmpresa.ExecSQL;
    if DataModulePrincipal.FDQueryEmpresa.RowsAffected = 0 then
      ShowMessage('Nenhuma empresa encontrada para exclusão.');

    DataModulePrincipal.FDConnection.Commit;

    // Exibe uma mensagem de sucesso
    ShowMessage('Empresa excluída com sucesso!');

    // Após excluir, limpa os campos do formulário
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;

    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;

    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;

    ImgEmpresa.Picture := nil;

    BtExcluir.Enabled := false;
    BtImagem.Enabled := false;
  except
   on E: Exception do
    begin
     DataModulePrincipal.FDConnection.Rollback; // Desfaz se houver erro
     ShowMessage('Erro ao excluir empresa: ' + E.Message);
    end;
  end;
end;


procedure TFCadastroDeEmpresa.BtGravarClick(Sender: TObject);
var
  StreamLogo: TMemoryStream;
begin
  if TutorialAtivo then
  begin
    BalloonHintCadastroEmpresa.HideHint;
    TutorialAtivo := False;
  end;
  // Validação dos campos obrigatórios
  if (Trim(EdNomeEmpresa.Text) = '') or
     (Trim(EdNomeFantasia.Text) = '') then
  begin
    ShowMessage('Preencha todos os campos obrigatórios!');
    Exit;
  end;
  if ImgEmpresa.Picture.Graphic.Empty then
  begin
    ShowMessage('Por favor, insira uma imagem para o logo da empresa!');
    Exit;
  end;
  try
    StreamLogo := TMemoryStream.Create;
    try
      ImgEmpresa.Picture.Graphic.SaveToStream(StreamLogo);
      StreamLogo.Position := 0;
      // Utilizar BeginTransaction para iniciar a transação
      DataModulePrincipal.FDConnection.StartTransaction;
      // Se BtExcluir está ativo, faz UPDATE, senão faz INSERT
      if BtExcluir.Enabled then
      begin
        // Atualiza o registro existente
        with DataModulePrincipal.FDQueryEmpresa do
        begin
          DataModulePrincipal.FDQueryEmpresa.Close;
          DataModulePrincipal.FDQueryEmpresa.SQL.Text := 'UPDATE Empresa SET NomeEmpresa = :NomeEmpresa, Telefone = :Telefone, NomeFantasia = :NomeFantasia, ' +
                      'CNPJ = :CNPJ, Endereco = :Endereco, Bairro = :Bairro, Cidade = :Cidade, Estado = :Estado, ' +
                      'ImgLogo = :ImgLogo, FlDefault = :FlDefault WHERE IDEmpresa = :IDEmpresa';
          DataModulePrincipal.FDQueryEmpresa.ParamByName('IDEmpresa').AsInteger := StrToInt(EdCodigoEmpresa.Text);
        end;
      end
      else
      begin
        // Insere um novo registro
        with DataModulePrincipal.FDQueryEmpresa do
        begin
          DataModulePrincipal.FDQueryEmpresa.Close;
          DataModulePrincipal.FDQueryEmpresa.SQL.Text := 'INSERT INTO Empresa (NomeEmpresa, Telefone, NomeFantasia, CNPJ, Endereco, Bairro, Cidade, Estado, ImgLogo, FlDefault) ' +
                      'VALUES (:NomeEmpresa, :Telefone, :NomeFantasia, :CNPJ, :Endereco, :Bairro, :Cidade, :Estado, :ImgLogo, :FlDefault)';
        end;
      end;
      // Atribui os valores dos campos
      with DataModulePrincipal.FDQueryEmpresa do
      begin
        DataModulePrincipal.FDQueryEmpresa.ParamByName('NomeEmpresa').AsString := EdNomeEmpresa.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('Telefone').AsString := EdTelefone.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('NomeFantasia').AsString := EdNomeFantasia.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('CNPJ').AsString := EdCNPJ.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('Endereco').AsString := EdEndereco.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('Bairro').AsString := EdBairro.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('Cidade').AsString := EdCidade.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('Estado').AsString := EdEstado.Text;
        DataModulePrincipal.FDQueryEmpresa.ParamByName('ImgLogo').LoadFromStream(StreamLogo, ftBlob);
        // Atribui o valor do CheckBox para FlDefault
        if CheckBoxDefault.Checked then
          DataModulePrincipal.FDQueryEmpresa.ParamByName('FlDefault').AsString := 'S'
        else
          DataModulePrincipal.FDQueryEmpresa.ParamByName('FlDefault').AsString := 'N';
        // Executa a query
        DataModulePrincipal.FDQueryEmpresa.ExecSQL;
      end;
      // Commit da transação
      DataModulePrincipal.FDConnection.Commit;
      ShowMessage('Empresa ' + IfThen(BtExcluir.Enabled, 'atualizada', 'cadastrada') + ' com sucesso!');
    except
      on E: Exception do
      begin
        // Em caso de erro, desfaz a transação
        DataModulePrincipal.FDConnection.Rollback;
        ShowMessage('Erro ao ' + IfThen(BtExcluir.Enabled, 'atualizar', 'cadastrar') + ' empresa: ' + E.Message);
      end;
    end;
  finally
    StreamLogo.Free;
    // Limpar campos e resetar estado dos botões
    EdNomeEmpresa.Clear;
    EdTelefone.Clear;
    EdNomeFantasia.Clear;
    EdCNPJ.Clear;
    EdEndereco.Clear;
    EdBairro.Clear;
    EdCidade.Clear;
    EdEstado.Clear;
    ImgEmpresa.Picture := nil;
    EdNomeEmpresa.Enabled := false;
    EdCNPJ.Enabled := false;
    EdNomeFantasia.Enabled := false;
    CheckBoxDefault.Enabled := false;
    EdTelefone.Enabled := false;
    EdEndereco.Enabled := false;
    EdCidade.Enabled := false;
    EdBairro.Enabled := false;
    EdEstado.Enabled := false;
    BtImagem.Enabled := false;
    BtNovo.Enabled := true;
    BtGravar.Enabled := false;
    BtEditar.Enabled := true;
    BtCancelar.Enabled := false;
    BtExcluir.Enabled := false;
  end;
end;



procedure TFCadastroDeEmpresa.BtImagemClick(Sender: TObject);
var
  OpenDialog: TOpenPictureDialog;
begin
  OpenDialog := TOpenPictureDialog.Create(nil);
  try
    OpenDialog.Filter := 'Imagens|*.jpg;*.png;*.bmp';
    if OpenDialog.Execute then
    begin
      ImgEmpresa.Picture.LoadFromFile(OpenDialog.FileName); // Exibe a imagem
      // Limpa o buffer anterior e salva a nova imagem
      FImagemStream.Clear;
      ImgEmpresa.Picture.Graphic.SaveToStream(FImagemStream);
      FImagemStream.Position := 0;
    end;
  finally
    OpenDialog.Free;
  end;
  if TutorialAtivo then
    MostrarBalloonHint(EdEndereco, 'Passo 6: Endereço', 'Informe o endereço da empresa.');

end;

procedure TFCadastroDeEmpresa.BtInfoClick(Sender: TObject);
begin
 // Inicia o tutorial mostrando o balão no botão BtNovoPedido
  TutorialAtivo := True;
  MostrarBalloonHint(BtNovo, 'Passo 1: Criar Novo Cadastro', 'Clique aqui para iniciar o cadastro.');
end;

procedure TFCadastroDeEmpresa.MostrarBalloonHint(Controle: TControl; Titulo, Mensagem: string);
begin
  BalloonHintCadastroEmpresa.HideHint;
  BalloonHintCadastroEmpresa.Title := Titulo;
  BalloonHintCadastroEmpresa.Description := Mensagem;
  BalloonHintCadastroEmpresa.ShowHint(Controle);
end;


procedure TFCadastroDeEmpresa.BtNovoClick(Sender: TObject);
begin
  // Verifica a quantidade de registros na tabela Empresa
  DataModulePrincipal.FDQueryEmpresa.Close;
  DataModulePrincipal.FDQueryEmpresa.SQL.Text := 'SELECT COUNT(*) FROM Empresa';
  DataModulePrincipal.FDQueryEmpresa.Open;
  // Se já existir 10 ou mais registros, bloqueia o cadastro
  if DataModulePrincipal.FDQueryEmpresa.Fields[0].AsInteger >= 10 then
  begin
    ShowMessage('Limite de 10 empresas atingido. Não é possível cadastrar mais empresas.');
    DataModulePrincipal.FDQueryEmpresa.Close;
    Exit;
  end
  else
  begin
    //Contrele de campos habilitados
    EdNomeEmpresa.Enabled := true;
    EdCNPJ.Enabled := true;
    EdNomeFantasia.Enabled := true;
    CheckBoxDefault.Enabled := true;
    EdTelefone.Enabled := true;
    EdEndereco.Enabled := true;
    EdCidade.Enabled := true;
    EdBairro.Enabled := true;
    EdEstado.Enabled := true;

    BtImagem.Enabled := true;
    BtNovo.Enabled := False;
    BtGravar.Enabled := true;
    BtEditar.Enabled := False;
    BtCancelar.Enabled := true;
  end;
  if TutorialAtivo then
  MostrarBalloonHint(EdNomeEmpresa, 'Passo 2: Nome da Empresa', 'Informe o nome da empresa.');

end;

procedure TFCadastroDeEmpresa.EdBairroExit(Sender: TObject);
begin
  if TutorialAtivo then
    MostrarBalloonHint(EdEstado, 'Passo 9: Estado', 'Informe o estado da empresa.');

end;

procedure TFCadastroDeEmpresa.EdCidadeExit(Sender: TObject);
begin
if TutorialAtivo then
    MostrarBalloonHint(EdBairro, 'Passo 8: Bairro', 'Informe o bairro da empresa.');

end;

procedure TFCadastroDeEmpresa.EdCNPJExit(Sender: TObject);
begin
if TutorialAtivo then
    MostrarBalloonHint(BtImagem, 'Passo 5: Adicionar Imagem', 'Clique aqui para adicionar uma imagem da empresa.');

end;

procedure TFCadastroDeEmpresa.EdCNPJKeyPress(Sender: TObject; var Key: Char);
var
  TextoAtual: string;
  ApenasNumeros: string;
  i: Integer;
begin
  // Permite apenas números e backspace
  if not (Key in ['0'..'9', #8]) then
  begin
    Key := #0;  // Bloqueia caracteres inválidos
    Exit;
  end;

  // Se for backspace, não faça nada, pois ele já pode apagar os caracteres
  if Key = #8 then
  begin
    Exit;
  end;

  // Obtém o texto atual sem pontos, barras ou traços
  TextoAtual := EdCNPJ.Text;
  ApenasNumeros := '';
  for i := 1 to Length(TextoAtual) do
    if TextoAtual[i] in ['0'..'9'] then
      ApenasNumeros := ApenasNumeros + TextoAtual[i];

  // Limita a 14 números
  if (Length(ApenasNumeros) >= 14) then
  begin
    Key := #0;  // Impede a digitação de mais números
    Exit;
  end;

  // Adiciona a formatação automaticamente enquanto digita
  case Length(ApenasNumeros) of
    2, 5: EdCNPJ.Text := EdCNPJ.Text + '.';
    8: EdCNPJ.Text := EdCNPJ.Text + '/';
    12: EdCNPJ.Text := EdCNPJ.Text + '-';
  end;

  // Move o cursor para o final do texto
  EdCNPJ.SelStart := Length(EdCNPJ.Text);
end;


procedure TFCadastroDeEmpresa.EdEnderecoExit(Sender: TObject);
begin
if TutorialAtivo then
    MostrarBalloonHint(EdCidade, 'Passo 7: Cidade', 'Informe a cidade da empresa.');

end;

procedure TFCadastroDeEmpresa.EdEstadoExit(Sender: TObject);
begin
 if TutorialAtivo then
    MostrarBalloonHint(BtGravar, 'Passo 10: Finalizar Cadastro', 'Clique aqui para salvar os dados.');

end;

procedure TFCadastroDeEmpresa.EdNomeEmpresaExit(Sender: TObject);
begin
if TutorialAtivo then
    MostrarBalloonHint(EdNomeFantasia, 'Passo 3: Nome Fantasia', 'Informe o nome fantasia da empresa.');
end;

procedure TFCadastroDeEmpresa.EdNomeFantasiaExit(Sender: TObject);
begin
if TutorialAtivo then
    MostrarBalloonHint(EdCNPJ, 'Passo 4: CNPJ', 'Digite o CNPJ da empresa.');
end;

procedure TFCadastroDeEmpresa.EdTelefoneKeyPress(Sender: TObject; var Key: Char);
var
  TextoAtual: string;
  ApenasNumeros: string;
  i: Integer;
begin
  // Permite apenas números e backspace
  if not (Key in ['0'..'9', #8]) then
  begin
    Key := #0;  // Bloqueia caracteres inválidos
    Exit;
  end;

  // Se for backspace, não faça nada, pois ele já pode apagar os caracteres
  if Key = #8 then
  begin
    Exit;
  end;

  // Obtém o texto atual sem a máscara
  TextoAtual := EdTelefone.Text;
  ApenasNumeros := '';
  for i := 1 to Length(TextoAtual) do
    if TextoAtual[i] in ['0'..'9'] then
      ApenasNumeros := ApenasNumeros + TextoAtual[i];

  // Limita a 11 números (telefone no formato (XX) XXXXX-XXXX)
  if (Length(ApenasNumeros) >= 14) then
  begin
    Key := #0;  // Impede a digitação de mais números
    Exit;
  end;

  // Formata o telefone automaticamente enquanto digita
  case Length(ApenasNumeros) of
    1: EdTelefone.Text := '(' + EdTelefone.Text;
    3: EdTelefone.Text := EdTelefone.Text + ') ';
    6: EdTelefone.Text := EdTelefone.Text + ' ';
    10: EdTelefone.Text := EdTelefone.Text + '-';
  end;

  // Move o cursor para o final do texto
  EdTelefone.SelStart := Length(EdTelefone.Text);
end;


procedure TFCadastroDeEmpresa.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FImagemStream.Free;
   if DataModulePrincipal.FDQueryEmpresa.Active then
    DataModulePrincipal.FDQueryEmpresa.Close;
end;

procedure TFCadastroDeEmpresa.FormCreate(Sender: TObject);
begin
  FImagemStream := TMemoryStream.Create;


  //Contrele de campos habilitados
  EdNomeEmpresa.Enabled := false;
  EdCNPJ.Enabled := false;
  EdNomeFantasia.Enabled := false;
  CheckBoxDefault.Enabled := false;
  EdTelefone.Enabled := false;
  EdEndereco.Enabled := false;
  EdCidade.Enabled := false;
  EdBairro.Enabled := false;
  EdEstado.Enabled := false;

  BtImagem.Enabled := false;
  BtNovo.Enabled := True;
  BtGravar.Enabled := false;
  BtEditar.Enabled := true;
  BtCancelar.Enabled := false;
end;

end.
